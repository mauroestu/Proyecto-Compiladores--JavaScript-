/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,12,14,22,30,34,43,45,46],$V1=[1,14],$V2=[1,18],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[13,28],$V8=[1,22],$V9=[13,14,21,23,28,69,70],$Va=[2,41],$Vb=[13,21,31],$Vc=[1,58],$Vd=[1,46],$Ve=[1,42],$Vf=[1,44],$Vg=[1,43],$Vh=[1,45],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[14,17,34,43,45,46,72,77,85,86,87,88,89,91,92,93,95,96,102,106,108,109],$Vt=[2,65],$Vu=[5,12,14,17,22,30,34,43,45,46,72,75,76,77,85,86,87,88,89,91,92,93,95,96,102,106,108,109],$Vv=[1,68],$Vw=[1,66],$Vx=[1,67],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[2,69],$VN=[13,21,24,29,31,38,47,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127],$VO=[13,21,23,24,28,29,31,38,47,70,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127],$VP=[2,149],$VQ=[24,31],$VR=[2,22],$VS=[1,145],$VT=[1,144],$VU=[1,143],$VV=[1,142],$VW=[1,140],$VX=[1,141],$VY=[1,133],$VZ=[1,136],$V_=[1,135],$V$=[1,134],$V01=[1,132],$V11=[1,147],$V21=[1,130],$V31=[1,139],$V41=[1,138],$V51=[1,137],$V61=[13,21,24,29,31,38,122,123,125,126,127],$V71=[1,167],$V81=[2,75],$V91=[1,184],$Va1=[12,14,17,43,45,46],$Vb1=[14,17,34,43,45,46,72,75,76,77,85,86,87,88,89,91,92,93,95,96,102,106,108,109],$Vc1=[21,23,28,69,70],$Vd1=[13,21,24,29,31,38,111,112,116,117,118,119,120,121,122,123,125,126,127],$Ve1=[13,21,24,29,31,38,47,111,112,113,115,116,117,118,119,120,121,122,123,125,126,127],$Vf1=[13,21,24,29,31,38,116,117,118,119,120,121,122,123,125,126,127],$Vg1=[13,21,24,29,31,38,122,123,126,127],$Vh1=[13,21,24,29,31,38,123,127],$Vi1=[1,215],$Vj1=[28,36],$Vk1=[24,28,31],$Vl1=[17,75,76];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"PADRE":3,"CUERPO_B3D":4,"EOF":5,"DECLARACION_PRINCIPAL":6,"DEC_VAR":7,"DEC_ARREGLO":8,"DECLARACION_METODO":9,"DECLARACION_FUNCION":10,"DECLARACION_ELEMENT":11,"pr_element":12,"pr_puntos":13,"id":14,"pr_labierto":15,"CUERPO_ELEMENT":16,"pr_lcerrado":17,"PROPIEDAD":18,"TIPO":19,"EXP":20,"pr_puncoma":21,"pr_principal":22,"pr_abierto":23,"pr_cerrado":24,"CUERPO_INSTRUCCION":25,"DIMS":26,"LISTA_PARAMETROS":27,"pr_cabierto":28,"pr_ccerrado":29,"pr_void":30,"pr_coma":31,"PARAMETRO":32,"DIMENSHON":33,"pr_array":34,"DIMENSIONES":35,"pr_of":36,"CUERPO_DIMENSION":37,"pr_dospuntos":38,"LISTA_ID":39,"ASIG_VAR":40,"CUERPO":41,"pr_create":42,"pr_str":43,"REF":44,"pr_num":45,"pr_bool":46,"pr_por":47,"DEC_IF":48,"DEC_WHILE":49,"DEC_DOWHILE":50,"DEC_REPEAT":51,"DEC_LOOP":52,"DEC_COUNT":53,"DEC_WHILEX":54,"DEC_RETURN":55,"DEC_CONTINUE":56,"DEC_BREAK":57,"DEC_OUTSTR":58,"DEC_OUTNUM":59,"DEC_INSTR":60,"DEC_SHOW":61,"DEC_THROW":62,"DEC_SWITCH":63,"ASIGNACION":64,"DEC_LLAMADA":65,"DEC_FOR":66,"DEC_ID":67,"DIMENSION":68,"pr_igual":69,"pr_punto":70,"LISTA_EXP":71,"pr_switch":72,"LISTA_CASOS":73,"CASO_DEFAULT":74,"pr_case":75,"pr_default":76,"pr_throws":77,"EXCEPCIONES":78,"pr_nullpointer":79,"pr_missing":80,"pr_aritmetic":81,"pr_stackover":82,"pr_heap":83,"pr_pool":84,"pr_show":85,"pr_instr":86,"pr_outstr":87,"pr_outnum":88,"pr_do":89,"pr_whilex":90,"pr_count":91,"pr_loop":92,"pr_repeat":93,"pr_until":94,"pr_while":95,"pr_for":96,"VAR_CONTROL":97,"ASIG_CONTROL":98,"CUERPO_ASIG":99,"pr_aumento":100,"pr_disminucion":101,"pr_if":102,"pr_then":103,"DEC_ELSE":104,"pr_else":105,"pr_break":106,"CUERPO_BREAK":107,"pr_continue":108,"pr_return":109,"CUERPO_RETURN":110,"pr_mas":111,"pr_menos":112,"pr_div":113,"pr_pot":114,"pr_mod":115,"pr_imayor":116,"pr_imenor":117,"pr_mayor":118,"pr_menor":119,"pr_digual":120,"pr_nigual":121,"pr_and":122,"pr_or":123,"pr_not":124,"pr_xor":125,"pr_nand":126,"pr_nor":127,"DEC_IDS":128,"numero":129,"pr_true":130,"pr_false":131,"cadena":132,"pr_null":133,"pr_getbool":134,"pr_getnum":135,"pr_innum":136,"pr_getrandom":137,"pr_getlength":138,"CUERPO_LEN":139,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"pr_element",13:"pr_puntos",14:"id",15:"pr_labierto",17:"pr_lcerrado",21:"pr_puncoma",22:"pr_principal",23:"pr_abierto",24:"pr_cerrado",28:"pr_cabierto",29:"pr_ccerrado",30:"pr_void",31:"pr_coma",34:"pr_array",36:"pr_of",38:"pr_dospuntos",42:"pr_create",43:"pr_str",45:"pr_num",46:"pr_bool",47:"pr_por",69:"pr_igual",70:"pr_punto",72:"pr_switch",75:"pr_case",76:"pr_default",77:"pr_throws",79:"pr_nullpointer",80:"pr_missing",81:"pr_aritmetic",82:"pr_stackover",83:"pr_heap",84:"pr_pool",85:"pr_show",86:"pr_instr",87:"pr_outstr",88:"pr_outnum",89:"pr_do",90:"pr_whilex",91:"pr_count",92:"pr_loop",93:"pr_repeat",94:"pr_until",95:"pr_while",96:"pr_for",100:"pr_aumento",101:"pr_disminucion",102:"pr_if",103:"pr_then",105:"pr_else",106:"pr_break",108:"pr_continue",109:"pr_return",111:"pr_mas",112:"pr_menos",113:"pr_div",114:"pr_pot",115:"pr_mod",116:"pr_imayor",117:"pr_imenor",118:"pr_mayor",119:"pr_menor",120:"pr_digual",121:"pr_nigual",122:"pr_and",123:"pr_or",124:"pr_not",125:"pr_xor",126:"pr_nand",127:"pr_nor",129:"numero",130:"pr_true",131:"pr_false",132:"cadena",133:"pr_null",134:"pr_getbool",135:"pr_getnum",136:"pr_innum",137:"pr_getrandom",138:"pr_getlength"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,0],[11,6],[16,2],[16,2],[16,1],[16,1],[18,5],[6,6],[10,10],[26,3],[26,0],[9,9],[27,3],[27,1],[27,0],[32,3],[8,7],[35,4],[35,3],[33,4],[33,0],[37,3],[37,1],[7,4],[40,2],[40,0],[41,1],[41,4],[39,3],[39,1],[19,2],[19,1],[19,1],[19,1],[44,1],[44,0],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,0],[65,2],[64,5],[68,4],[68,0],[67,3],[67,4],[67,1],[71,3],[71,1],[71,0],[63,10],[73,5],[73,4],[74,3],[74,0],[62,5],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[61,5],[60,7],[58,5],[59,7],[54,10],[53,7],[52,5],[51,8],[50,8],[49,7],[66,11],[98,2],[99,2],[99,1],[99,1],[97,4],[97,3],[48,9],[104,4],[104,0],[57,3],[107,1],[107,0],[56,2],[55,3],[110,1],[110,0],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,2],[20,1],[20,1],[20,1],[20,1],[20,1],[20,4],[20,8],[20,6],[20,3],[20,4],[128,3],[128,4],[128,1],[139,3],[139,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
    this.$ = new ParseTreeNode('PADRE',0,0,[]);
    this.$.Nodes.push($$[$0-1]);
    arbol = this.$;

break;
case 2: case 3: case 4: case 5: case 6: case 7: case 11: case 20: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 73:

    this.$ = this.$;
    this.$.Nodes.push($$[$0]);

break;
case 8:

    this.$ = new ParseTreeNode('CUERPO_B3D',0,0,[]);

break;
case 9:

    this.$ = new ParseTreeNode('DECLARACION_ELEMENT',_$[$0-5],_$[$0-5],[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-3] + ' (id)',_$[$0-3],_$[$0-3],[])); this.$.Nodes.push($$[$0-1]);

break;
case 10:

    this.$ = this.$;
    this.$.Nodes.push($$[$0]); 

break;
case 12: case 13:

    this.$ = new ParseTreeNode('CUERPO_ELEMENT',0,0,[]);
    this.$.Nodes.push($$[$0]);

break;
case 14:

    this.$ = new ParseTreeNode('PROPIEDAD',_$[$0-3],_$[$0-3],[]);
    this.$.Nodes.push($$[$0-4]); this.$.Nodes.push(new ParseTreeNode($$[$0-3] + ' (id)',_$[$0-3],_$[$0-3],[])); this.$.Nodes.push($$[$0-1]);

break;
case 15:

    this.$ = new ParseTreeNode('DECLARACION_PRINCIPAL',_$[$0-5],_$[$0-5],[]);
    this.$.Nodes.push($$[$0-1]);

break;
case 16:

    this.$ = new ParseTreeNode('DECLARACION_FUNCION',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-9]); this.$.Nodes.push($$[$0-8]); this.$.Nodes.push(new ParseTreeNode($$[$0-6] + ' (id)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0-4]); this.$.Nodes.push($$[$0-1]);

break;
case 17:

    this.$ = this.$;
    this.$.Nodes.push(new ParseTreeNode('(dimension)',yylineno,yyleng,[]));

break;
case 18:

    this.$ = new ParseTreeNode('DIMS',0,0,[]);

break;
case 19:

    this.$ = new ParseTreeNode('DECLARACION_METODO',yylineno,yyleng,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-6] + ' (id)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0-4]); this.$.Nodes.push($$[$0-1]);

break;
case 21:

    this.$ = new ParseTreeNode('LISTA_PARAMETROS',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0]);

break;
case 22:

    this.$ = new ParseTreeNode('LISTA_PARAMETROS',yylineno,yyleng,[]);

break;
case 23:

    this.$ = new ParseTreeNode('PARAMETRO',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-2]); this.$.Nodes.push(new ParseTreeNode($$[$0-1] + ' (id)',yylineno,yyleng,[]));  this.$.Nodes.push($$[$0]);

break;
case 24:

    this.$ = new ParseTreeNode('DEC_ARREGLO',yylineno,yyleng,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-4] + ' (id)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0-3]); this.$.Nodes.push($$[$0-1]);

break;
case 25: case 27: case 68: case 71: case 148:

    this.$ = this.$;
    this.$.Nodes.push($$[$0-1]);

break;
case 26:

    this.$ = new ParseTreeNode('DIMENSIONES',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-1]);

break;
case 28:

    this.$ = new ParseTreeNode('DIMENSHON',yylineno,yyleng,[]);

break;
case 29:

    this.$ = new ParseTreeNode('CUERPO_DIMENSION',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-2]); this.$.Nodes.push($$[$0]);

break;
case 30:

    this.$ = new ParseTreeNode('CUERPO_DIMENSION',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0]);

break;
case 31:

    this.$ = new ParseTreeNode('DEC_VAR',0,0,[]);
    this.$.Nodes.push($$[$0-3]); this.$.Nodes.push($$[$0-2]); this.$.Nodes.push($$[$0-1]);

break;
case 32:

    this.$ = new ParseTreeNode('ASIG_VAR',0,0,[]);
    this.$.Nodes.push($$[$0]);

break;
case 33:

    this.$ = new ParseTreeNode('ASIG_VAR',0,0,[]);

break;
case 34:

    this.$ = new ParseTreeNode('CUERPO',0,0,[]);
    this.$.Nodes.push($$[$0]);

break;
case 35:

    this.$ = new ParseTreeNode('CREATE',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-1] + ' (id)',yylineno,yyleng,[]));

break;
case 36:

    this.$ = this.$;
    this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (id)',yylineno,yyleng,[]));  

break;
case 37:

    this.$ = new ParseTreeNode('LISTA_ID',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (id)',yylineno,yyleng,[]));  

break;
case 38:

    this.$ = new ParseTreeNode('TIPO',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-1] + ' (tipo)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0]);

break;
case 39: case 40:

    this.$ = new ParseTreeNode('TIPO',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (tipo)',yylineno,yyleng,[]));  

break;
case 41:

    this.$ = new ParseTreeNode('TIPO',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (element)',yylineno,yyleng,[]));  

break;
case 42:

    this.$ = new ParseTreeNode('REF',yylineno,yyleng,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (puntero)',yylineno,yyleng,[]));

break;
case 43:

    this.$ = new ParseTreeNode('REF',yylineno,yyleng,[]);

break;
case 65:

    this.$ = new ParseTreeNode('CUERPO_INSTRUCCION',0,0,[]);

break;
case 66:

    this.$ = new ParseTreeNode('DEC_LLAMADA',0,0,[]);
    this.$.Nodes.push($$[$0-1]);

break;
case 67:

    this.$ = new ParseTreeNode('ASIGNACION',0,0,[]);
    this.$.Nodes.push($$[$0-4]); this.$.Nodes.push($$[$0-3]); this.$.Nodes.push($$[$0-1]);

break;
case 69:

    this.$ = new ParseTreeNode('DIMENSION',0,0,[]);

break;
case 70: case 147:

    this.$ = this.$;
    this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (id)',yylineno,yyleng,[]));

break;
case 72:

    this.$ = new ParseTreeNode('DEC_ID',_$[$0],_$[$0],[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0].Nodes[0].FindTokenAndGetText() + ' (id)',yylineno,yyleng,[]));

break;
case 74:

    this.$ = new ParseTreeNode('LISTA_EXP',0,0,[]);
    this.$.Nodes.push($$[$0]);

break;
case 75:

    this.$ = new ParseTreeNode('LISTA_EXP',0,0,[]);

break;
case 76:

    this.$ = new ParseTreeNode('DEC_SWITCH',_$[$0-9],_$[$0-8],[]);
    this.$.Nodes.push($$[$0-7]); this.$.Nodes.push($$[$0-5]); this.$.Nodes.push($$[$0-2]); this.$.Nodes.push($$[$0-1]);

break;
case 77:

    this.$ = this.$;
    this.$.Nodes.push($$[$0-2]); this.$.Nodes.push($$[$0]);

break;
case 78:

    this.$ = new ParseTreeNode('LISTA_CASOS',_$[$0-3],_$[$0-3],[]);
    this.$.Nodes.push($$[$0-2]); this.$.Nodes.push($$[$0]);

break;
case 79:

    this.$ = new ParseTreeNode('CASO_DEFAULT',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0]);

break;
case 80:

    this.$ = new ParseTreeNode('CASO_DEFAULT',yylineno,yyleng,[]);

break;
case 81:

    this.$ = new ParseTreeNode('DEC_THROW',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-2]);

break;
case 82:
 
    this.$ = new ParseTreeNode('null',0,0,[]); this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (err)',yylineno,yyleng,[]));  

break;
case 83:
 
    this.$ = new ParseTreeNode('missing',0,0,[]); this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (err)',yylineno,yyleng,[]));  

break;
case 84:
 
    this.$ = new ParseTreeNode('aritmetic',0,0,[]); this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (err)',yylineno,yyleng,[]));  

break;
case 85:
 
    this.$ = new ParseTreeNode('stack',0,0,[]); this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (err)',yylineno,yyleng,[]));  

break;
case 86:
 
    this.$ = new ParseTreeNode('heap',0,0,[]); this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (err)',yylineno,yyleng,[]));  

break;
case 87:
 
    this.$ = new ParseTreeNode('pool',0,0,[]); this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (err)',yylineno,yyleng,[]));  

break;
case 88:

    this.$ = new ParseTreeNode('DEC_SHOW',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-2]);

break;
case 89:

    this.$ = new ParseTreeNode('DEC_INSTR',yylineno,yyleng,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-4] + ' (id)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0-2]);

break;
case 90:

    this.$ = new ParseTreeNode('DEC_OUTSTR',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-2]);

break;
case 91:

    this.$ = new ParseTreeNode('DEC_OUTNUM',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-4]); this.$.Nodes.push($$[$0-2]);

break;
case 92:

    this.$ = new ParseTreeNode('DEC_WHILEX',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-7]); this.$.Nodes.push($$[$0-3]); this.$.Nodes.push($$[$0-1]);

break;
case 93:

    this.$ = new ParseTreeNode('DEC_COUNT',yylineno,yyleng,[]); 
    this.$.Nodes.push($$[$0-4]); this.$.Nodes.push($$[$0-1]);

break;
case 94:

    this.$ = new ParseTreeNode('DEC_LOOP',yylineno,yyleng,[]); 
    this.$.Nodes.push(new ParseTreeNode($$[$0-3] + ' (id)',_$[$0-4],_$[$0-4],[])); this.$.Nodes.push($$[$0-1]);

break;
case 95:

    this.$ = new ParseTreeNode('DEC_REPEAT',_$[$0-7],_$[$0-7],[]); 
    this.$.Nodes.push($$[$0-5]); this.$.Nodes.push($$[$0-1]);

break;
case 96:

    this.$ = new ParseTreeNode('DEC_DOWHILE',_$[$0-7],_$[$0-7],[]); 
    this.$.Nodes.push($$[$0-5]); this.$.Nodes.push($$[$0-1]);

break;
case 97:

    this.$ = new ParseTreeNode('DEC_WHILE',_$[$0-6],_$[$0-6],[]); 
    this.$.Nodes.push($$[$0-4]); this.$.Nodes.push($$[$0-1]);

break;
case 98:

    this.$ = new ParseTreeNode('DEC_FOR',_$[$0-10],_$[$0-10],[]); 
    this.$.Nodes.push($$[$0-8]); this.$.Nodes.push($$[$0-6]); this.$.Nodes.push($$[$0-4]); this.$.Nodes.push($$[$0-1]);

break;
case 99:

    this.$ = new ParseTreeNode('ASIG_CONTROL',yylineno,yyleng,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-1] + ' (id)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0]);

break;
case 100:

    this.$ = new ParseTreeNode('NORMAL',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0]);

break;
case 101:

    this.$ = new ParseTreeNode('AUMENTO',yylineno,yyleng,[]);

break;
case 102:

    this.$ = new ParseTreeNode('DISMINUCION',yylineno,yyleng,[]);

break;
case 103:

    this.$ = new ParseTreeNode('DECLARACION',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-3]); this.$.Nodes.push(new ParseTreeNode($$[$0-2] + ' (id)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0]);

break;
case 104:

    this.$ = new ParseTreeNode('ASIGNACION',yylineno,yyleng,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-2] + ' (id)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0]);

break;
case 105:

    this.$ = new ParseTreeNode('DEC_IF',_$[$0-8],_$[$0-8],[]); 
    this.$.Nodes.push($$[$0-6]); this.$.Nodes.push($$[$0-2]); this.$.Nodes.push($$[$0]);

break;
case 106:

    this.$ = new ParseTreeNode('DEC_ELSE',_$[$0-3],_$[$0-3],[]);
    this.$.Nodes.push($$[$0-1]);

break;
case 107:

    this.$ = new ParseTreeNode('DEC_ELSE',0,0,[]);

break;
case 108:

    this.$ = new ParseTreeNode('DEC_BREAK',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-1]);

break;
case 109:

    this.$ = new ParseTreeNode('CUERPO_BREAK',yylineno,yyleng,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0] + ' (id)',yylineno,yyleng,[]));

break;
case 110:

    this.$ = new ParseTreeNode('CUERPO_BREAK',yylineno,yyleng,[]);

break;
case 111:

    this.$ = new ParseTreeNode('DEC_CONTINUE',yylineno,yyleng,[]);

break;
case 112:

    this.$ = new ParseTreeNode('DEC_RETURN',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0-1]);

break;
case 113:

    this.$ = new ParseTreeNode('CUERPO_RETURN',yylineno,yyleng,[]);
    this.$.Nodes.push($$[$0]);

break;
case 114:

    this.$ = new ParseTreeNode('CUERPO_RETURN',yylineno,yyleng,[]);

break;
case 115: case 116: case 117: case 118: case 119: case 120: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 132: case 133: case 134:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push($$[$0-2]); this.$.Nodes.push(new ParseTreeNode($$[$0-1]+ ' (reservada)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0]);

break;
case 121: case 122: case 131:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-1]+ ' (reservada)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0]);

break;
case 135:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push($$[$0-1]);

break;
case 136:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push($$[$0-1]); this.$.Nodes.push($$[$0]); 

break;
case 137:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0]+ ' (numero)',yylineno,yyleng,[]));

break;
case 138: case 139:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0]+ ' (bool)',yylineno,yyleng,[]));

break;
case 140:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0]+ ' (cadena)',yylineno,yyleng,[]));

break;
case 141:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0]+ ' (null)',_$[$0],_$[$0],[]));

break;
case 142:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-3]+' (primitiva)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0-1]);

break;
case 143:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-7]+' (primitiva)',yylineno,yyleng,[])); 
    this.$.Nodes.push($$[$0-5]); this.$.Nodes.push($$[$0-3]); this.$.Nodes.push($$[$0-1]);

break;
case 144:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-5]+' (primitiva)',yylineno,yyleng,[]));
    this.$.Nodes.push($$[$0-3]); this.$.Nodes.push($$[$0-1]);

break;
case 145:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-2]+' (primitiva)',yylineno,yyleng,[]));

break;
case 146:

    this.$ = new ParseTreeNode('EXP',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-3]+' (primitiva)',yylineno,yyleng,[]));
    this.$.Nodes.push($$[$0-1]);

break;
case 149:

    this.$ = new ParseTreeNode('DEC_IDS',_$[$0],_$[$0],[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0]+ ' (id)',yylineno,yyleng,[]));

break;
case 150:

    this.$ = new ParseTreeNode('CUERPO_LEN',0,0,[]);
    this.$.Nodes.push(new ParseTreeNode($$[$0-2] + ' (id)',yylineno,yyleng,[])); this.$.Nodes.push($$[$0]);

break;
case 151:

    this.$ = new ParseTreeNode('CUERPO_LEN',0,0,[]);
    this.$.Nodes.push($$[$0]);

break;
}
},
table: [o($V0,[2,8],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:$V1,14:$V2,19:11,22:[1,10],30:[1,13],34:$V3,43:$V4,45:$V5,46:$V6},{1:[2,1]},o($V0,[2,2]),o($V0,[2,3]),o($V0,[2,4]),o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,7]),{23:[1,19]},o($V7,[2,18],{39:20,26:21,14:$V8}),{13:[1,23]},{13:[1,24]},{13:[1,25]},o($V9,[2,43],{44:26,47:[1,27]}),o($V9,[2,39]),o($V9,[2,40]),o($V9,$Va),{24:[1,28]},{13:[1,31],21:[2,33],31:[1,30],40:29},{13:[1,32],28:[1,33]},o($Vb,[2,37]),{14:[1,34]},{14:[1,35]},{14:[1,36]},o($V9,[2,38]),o($V9,[2,42]),{15:[1,37]},{21:[1,38]},{14:[1,39]},{14:$Vc,20:41,23:$Vd,41:40,42:$Ve,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:[1,59]},{29:[1,60]},{28:[1,62],35:61},{23:[1,63]},{15:[1,64]},o($Vs,$Vt,{25:65}),o($Vu,[2,31]),o($Vb,[2,36]),{21:[2,32]},{21:[2,34],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{23:[1,83]},{14:$Vc,20:84,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:85,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:86,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:87,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},o([13,21,24,28,29,31,38,47,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127],$VM,{68:88,23:[1,90],70:[1,89]}),o($VN,[2,137]),o($VN,[2,138]),o($VN,[2,139]),o($VN,[2,140]),o($VN,[2,141]),{23:[1,91]},{23:[1,92]},{23:[1,93]},{23:[1,94]},{23:[1,95]},o($VO,$VP),{23:[1,96]},o($V7,[2,17]),{28:[1,98],36:[1,97]},{14:$Vc,20:100,23:$Vd,37:99,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},o($VQ,$VR,{27:101,32:102,19:103,14:$V2,43:$V4,45:$V5,46:$V6}),{11:105,12:$V1,14:$V2,16:104,18:106,19:107,43:$V4,45:$V5,46:$V6},{7:110,8:111,14:$V2,17:[1,108],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},{14:$Vc,20:148,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:149,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:150,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:151,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:152,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:153,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:154,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:155,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:156,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:157,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:158,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:159,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:160,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:161,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:162,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:163,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:164,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:[1,165]},o($VN,[2,121]),o($VN,[2,122]),o($V61,[2,131],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG}),{24:[1,166],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($VN,[2,136],{28:$V71}),{14:[1,168]},o($VQ,$V81,{128:47,71:169,20:170,14:$Vc,23:$Vd,111:$Vf,112:$Vg,124:$Vh,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr}),{14:$Vc,20:171,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:172,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:173,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{24:[1,174]},{14:[1,176],20:177,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr,139:175},o($VQ,$VR,{32:102,19:103,27:178,14:$V2,43:$V4,45:$V5,46:$V6}),{14:$V2,19:179,43:$V4,45:$V5,46:$V6},{14:$Vc,20:100,23:$Vd,37:180,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{29:[1,181]},{29:[2,30],38:[1,182],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{24:[1,183],31:$V91},o($VQ,[2,21]),{14:[1,185]},{11:188,12:$V1,14:$V2,17:[1,186],18:187,19:107,43:$V4,45:$V5,46:$V6},o($Va1,[2,12]),o($Va1,[2,13]),{14:[1,189]},o($V0,[2,15]),o($Vb1,[2,44]),o($Vb1,[2,45]),o($Vb1,[2,46]),o($Vb1,[2,47]),o($Vb1,[2,48]),o($Vb1,[2,49]),o($Vb1,[2,50]),o($Vb1,[2,51]),o($Vb1,[2,52]),o($Vb1,[2,53]),o($Vb1,[2,54]),o($Vb1,[2,55]),o($Vb1,[2,56]),o($Vb1,[2,57]),o($Vb1,[2,58]),o($Vb1,[2,59]),o($Vb1,[2,60]),o($Vb1,[2,61]),o($Vb1,[2,62]),o($Vb1,[2,63]),o($Vb1,[2,64]),{23:[1,190]},o($Vc1,[2,72],{39:20,14:$V8}),{23:[1,191]},{15:[1,192]},{15:[1,193]},{14:[1,194]},{23:[1,195]},{14:$Vc,20:197,21:[2,114],23:$Vd,110:196,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{21:[1,198]},{14:[1,200],21:[2,110],107:199},{23:[1,201]},{23:[1,202]},{23:[1,203]},{23:[1,204]},{23:[1,205]},{23:[1,206]},o([28,69],$VM,{68:207,21:[1,208],23:[1,210],70:[1,209]}),{23:[1,211]},o($Vd1,[2,115],{47:$Vv,113:$Vy,114:$Vz,115:$VA}),o($Vd1,[2,116],{47:$Vv,113:$Vy,114:$Vz,115:$VA}),o($Ve1,[2,117],{114:$Vz}),o($Ve1,[2,118],{114:$Vz}),o($Ve1,[2,119],{114:$Vz}),o($Ve1,[2,120],{114:$Vz}),o($Vf1,[2,123],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA}),o($Vf1,[2,124],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA}),o($Vf1,[2,125],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA}),o($Vf1,[2,126],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA}),o($Vf1,[2,127],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA}),o($Vf1,[2,128],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA}),o($Vg1,[2,129],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,125:$VJ}),o($Vh1,[2,130],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,125:$VJ,126:$VK}),o($V61,[2,132],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG}),o($Vg1,[2,133],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,125:$VJ}),o($Vh1,[2,134],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,125:$VJ,126:$VK}),{24:[1,212]},o($VN,[2,135]),{14:$Vc,20:213,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},o($VO,[2,147]),{24:[1,214],31:$Vi1},o($VQ,[2,74],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL}),{24:[1,216],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{31:[1,217],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{31:[1,218],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($VN,[2,145]),{24:[1,219]},o([23,24,28,47,70,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127],$VP,{31:[1,220]}),{24:[2,151],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{24:[1,221],31:$V91},{21:[1,222]},{29:[1,223]},o($Vj1,[2,26]),{14:$Vc,20:224,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{15:[1,225]},{14:$V2,19:103,32:226,43:$V4,45:$V5,46:$V6},o($Vk1,[2,28],{33:227}),o([5,12,14,17,22,30,34,43,45,46],[2,9]),o($Va1,[2,10]),o($Va1,[2,11]),{13:[1,228]},{14:$Vc,20:229,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:230,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},o($Vs,$Vt,{25:231}),o($Vs,$Vt,{25:232}),{15:[1,233]},{14:$Vc,20:234,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{21:[1,235]},{21:[2,113],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vb1,[2,111]),{21:[1,236]},{21:[2,109]},{14:$Vc,20:237,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:238,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:[1,239]},{14:$Vc,20:240,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{78:241,79:[1,242],80:[1,243],81:[1,244],82:[1,245],83:[1,246],84:[1,247]},{14:$Vc,20:248,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{28:$V71,69:[1,249]},o($Vb1,[2,66]),{14:[1,250]},o($VQ,$V81,{128:47,20:170,71:251,14:$Vc,23:$Vd,111:$Vf,112:$Vg,124:$Vh,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr}),{14:[1,254],19:253,43:$V4,45:$V5,46:$V6,97:252},{21:[2,35]},{29:[1,255],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($VO,[2,148]),{14:$Vc,20:256,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},o($VN,[2,142]),{14:$Vc,20:257,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:258,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},o($VN,[2,146]),{14:$Vc,20:259,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{15:[1,260]},o($Vu,[2,24]),o($Vj1,[2,25]),{29:[2,29],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vs,$Vt,{25:261}),o($VQ,[2,20]),o($VQ,[2,23],{28:[1,262]}),{14:$Vc,20:263,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{24:[1,264],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{24:[1,265],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{7:110,8:111,14:$V2,17:[1,266],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},{7:110,8:111,14:$V2,17:[1,267],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},o($Vs,$Vt,{25:268}),{24:[1,269],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vb1,[2,112]),o($Vb1,[2,108]),{24:[1,270],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{31:[1,271],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{31:[1,272]},{24:[1,273],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{24:[1,274]},{24:[2,82]},{24:[2,83]},{24:[2,84]},{24:[2,85]},{24:[2,86]},{24:[2,87]},{31:[1,275],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{14:$Vc,20:41,23:$Vd,41:276,42:$Ve,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},o($Vc1,[2,70]),{24:[1,277],31:$Vi1},{21:[1,278]},{14:[1,279]},{14:$Va,69:[1,280]},o([13,21,24,28,29,31,38,47,69,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127],[2,68]),o($VQ,[2,73],{47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL}),{31:[1,281],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{24:[1,282],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{24:[2,150],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vs,$Vt,{25:283}),{7:110,8:111,14:$V2,17:[1,284],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},{14:$Vc,20:100,23:$Vd,37:285,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{21:[1,286],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{103:[1,287]},{15:[1,288]},{90:[1,290],95:[1,289]},{94:[1,291]},{7:110,8:111,14:$V2,17:[1,292],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},{15:[1,293]},{21:[1,294]},{14:$Vc,20:295,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:296,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{21:[1,297]},{21:[1,298]},{14:$Vc,20:299,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{21:[1,300]},o($Vc1,[2,71]),{14:$Vc,20:301,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{13:[1,302]},{14:$Vc,20:303,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:304,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},o($VN,[2,144]),{7:110,8:111,14:$V2,17:[1,305],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},o($V0,[2,19]),{29:[1,306]},o($Va1,[2,14]),{15:[1,307]},o($Vs,$Vt,{25:308}),{23:[1,309]},{23:[1,310]},{23:[1,311]},o($Vb1,[2,94]),o($Vs,$Vt,{25:312}),o($Vb1,[2,90]),{24:[1,313],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{24:[1,314],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vb1,[2,88]),o($Vb1,[2,81]),{24:[1,315],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vb1,[2,67]),{21:[1,316],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{14:$Vc,20:317,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{21:[2,104],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{24:[1,318],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($V0,[2,16]),o($Vk1,[2,27]),o($Vs,$Vt,{25:319}),{7:110,8:111,14:$V2,17:[1,320],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},{14:$Vc,20:321,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:322,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{14:$Vc,20:323,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{7:110,8:111,14:$V2,17:[1,324],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},{21:[1,325]},{21:[1,326]},{15:[1,327]},{14:[1,329],98:328},{21:[2,103],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($VN,[2,143]),{7:110,8:111,14:$V2,17:[1,330],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},o($Vb1,[2,97]),{24:[1,331],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{31:[1,332],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{24:[1,333],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vb1,[2,93]),o($Vb1,[2,91]),o($Vb1,[2,89]),{73:334,75:[1,335]},{24:[1,336]},{69:[1,338],99:337,100:[1,339],101:[1,340]},o($Vb1,[2,107],{104:341,105:[1,342]}),o($Vb1,[2,96]),{14:$Vc,20:343,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},o($Vb1,[2,95]),{17:[2,80],74:344,75:[1,345],76:[1,346]},{14:$Vc,20:347,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{15:[1,348]},{24:[2,99]},{14:$Vc,20:349,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{24:[2,101]},{24:[2,102]},o($Vb1,[2,105]),{15:[1,350]},{24:[1,351],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},{17:[1,352]},{14:$Vc,20:353,23:$Vd,111:$Vf,112:$Vg,124:$Vh,128:47,129:$Vi,130:$Vj,131:$Vk,132:$Vl,133:$Vm,134:$Vn,135:$Vo,136:$Vp,137:$Vq,138:$Vr},{13:[1,354]},{13:[1,355],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vs,$Vt,{25:356}),{24:[2,100],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vs,$Vt,{25:357}),o($Vb1,[2,92]),o($Vb1,[2,76]),{13:[1,358],47:$Vv,111:$Vw,112:$Vx,113:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI,125:$VJ,126:$VK,127:$VL},o($Vs,$Vt,{25:359}),o($Vb1,$Vt,{25:360}),{7:110,8:111,14:$V2,17:[1,361],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},{7:110,8:111,14:$V2,17:[1,362],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},o($Vb1,$Vt,{25:363}),{7:110,8:111,14:$V2,17:[2,79],19:131,34:$V3,43:$V4,45:$V5,46:$V6,48:109,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,67:146,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51},o($Vl1,[2,78],{48:109,7:110,8:111,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,19:131,67:146,14:$V2,34:$V3,43:$V4,45:$V5,46:$V6,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51}),o($Vb1,[2,98]),o($Vb1,[2,106]),o($Vl1,[2,77],{48:109,7:110,8:111,49:112,50:113,51:114,52:115,53:116,54:117,55:118,56:119,57:120,58:121,59:122,60:123,61:124,62:125,63:126,64:127,65:128,66:129,19:131,67:146,14:$V2,34:$V3,43:$V4,45:$V5,46:$V6,72:$VS,77:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,91:$VZ,92:$V_,93:$V$,95:$V01,96:$V11,102:$V21,106:$V31,108:$V41,109:$V51})],
defaultActions: {3:[2,1],40:[2,32],200:[2,109],212:[2,35],242:[2,82],243:[2,83],244:[2,84],245:[2,85],246:[2,86],247:[2,87],337:[2,99],339:[2,101],340:[2,102]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* IGNORE */
break;
case 2:return 46;
break;
case 3:return 45;
break;
case 4:return 43;
break;
case 5:return 34;
break;
case 6:return 12;
break;
case 7:return 30;
break;
case 8:return 130;
break;
case 9:return 131;
break;
case 10:return 133;
break;
case 11:return 22;
break;
case 12:return 134;
break;
case 13:return 135;
break;
case 14:return 87;
break;
case 15:return 88;
break;
case 16:return 86;
break;
case 17:return 136;
break;
case 18:return 85;
break;
case 19:return 137;
break;
case 20:return 138;
break;
case 21:return 77;
break;
case 22:return 79; //102
break;
case 23:return 80; //243
break;
case 24:return 81; //0  
break;
case 25:return 82; //624
break;
case 26:return 83;  //789
break;
case 27:return 84;   //801
break;
case 28:return 42;
break;
case 29:return 102;
break;
case 30:return 103;
break;
case 31:return 105;
break;
case 32:return 72;
break;
case 33:return 75;
break;
case 34:return 76;
break;
case 35:return 106;
break;
case 36:return 108;
break;
case 37:return 109;
break;
case 38:return 95;
break;
case 39:return 89;
break;
case 40:return 93;
break;
case 41:return 94;
break;
case 42:return 96;
break;
case 43:return 92;
break;
case 44:return 91;
break;
case 45:return 90;
break;
case 46:return 47;
break;
case 47:return 113;
break;
case 48:return 100;
break;
case 49:return 101;
break;
case 50:return 112;
break;
case 51:return 111;
break;
case 52:return 114;
break;
case 53:return 115;
break;
case 54:return 117;
break;
case 55:return 116;
break;
case 56:return 119;
break;
case 57:return 118;
break;
case 58:return 120;
break;
case 59:return 121;
break;
case 60:return 122;
break;
case 61:return 123;
break;
case 62:return 124;
break;
case 63:return 125;
break;
case 64:return 126;
break;
case 65:return 127;
break;
case 66:return 36;
break;
case 67:return 69;
break;
case 68:return 23;
break;
case 69:return 24;
break;
case 70:return 15;
break;
case 71:return 17;
break;
case 72:return 28;
break;
case 73:return 29;
break;
case 74:return 13;
break;
case 75:return 21;
break;
case 76:return 31;
break;
case 77:return 38;
break;
case 78:return 70;
break;
case 79:return 129;
break;
case 80:return 132;
break;
case 81:return 14;
break;
case 82:/* IGNORE */
break;
case 83:return 5
break;
case 84:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:%%.*)/,/^(?:bool\b)/,/^(?:num\b)/,/^(?:str\b)/,/^(?:array\b)/,/^(?:element\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:NULL\b)/,/^(?:Principal\b)/,/^(?:getBool\b)/,/^(?:getNum\b)/,/^(?:outStr\b)/,/^(?:outNum\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:throws\b)/,/^(?:NullPointerException\b)/,/^(?:MissingReturnStatement\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:create\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\|&)/,/^(?:&\?)/,/^(?:\|\?)/,/^(?:of\b)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:("|')([^\'"']|\\.)*("|'))/,/^(?:[a-zA-Z]([a-zA-Z]|[0-9]|_)*)/,/^(?:¿¿[^]*\?\?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}